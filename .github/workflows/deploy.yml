name: Build and Deploy Backend

on:
  push:
    branches: [main, dev, stage]
  pull_request:
    branches: [main, dev, stage]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore AmesaBackend/AmesaBackend.csproj

      - name: Build
        run: dotnet build AmesaBackend/AmesaBackend.csproj --configuration Release --no-restore

      - name: Test
        run: dotnet test AmesaBackend.Tests/AmesaBackend.Tests.csproj --configuration Release --no-build --verbosity normal

      - name: Publish
        run: dotnet publish AmesaBackend/AmesaBackend.csproj --configuration Release --output ./publish

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-files
          path: publish/

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-files
          path: publish/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: amesa-backend-dev
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: amesa-backend-dev
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.DEV_ECS_CLUSTER }} \
            --service ${{ secrets.DEV_ECS_SERVICE }} \
            --force-new-deployment

  deploy-stage:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/stage'
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-files
          path: publish/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: amesa-backend-stage
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: amesa-backend-stage
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.STAGE_ECS_CLUSTER }} \
            --service ${{ secrets.STAGE_ECS_SERVICE }} \
            --force-new-deployment

  deploy-prod:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-files
          path: publish/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: amesa-backend-prod
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: amesa-backend-prod
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.PROD_ECS_CLUSTER }} \
            --service ${{ secrets.PROD_ECS_SERVICE }} \
            --force-new-deployment
