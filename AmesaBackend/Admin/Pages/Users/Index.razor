@page "/admin/users"
@inject IAdminDatabaseService DatabaseService

<PageTitle>Users - Amesa Admin</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1 class="display-6">
                <i class="fas fa-users"></i> Manage Users
            </h1>
            <p class="text-muted">View and edit user accounts</p>
        </div>
    </div>

    @if (users == null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary"></div>
            <p class="mt-3">Loading users...</p>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Name</th>
                                <th>Status</th>
                                <th>Verified</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in users)
                            {
                                <tr>
                                    <td><strong>@user.Username</strong></td>
                                    <td>
                                        @user.Email
                                        @if (user.EmailVerified)
                                        {
                                            <i class="fas fa-check-circle text-success" title="Verified"></i>
                                        }
                                    </td>
                                    <td>@user.FirstName @user.LastName</td>
                                    <td>
                                        <span class="badge @GetStatusBadge(user.Status)">
                                            @user.Status
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge @GetVerificationBadge(user.VerificationStatus)">
                                            @user.VerificationStatus
                                        </span>
                                    </td>
                                    <td>
                                        <small>@user.CreatedAt.ToString("yyyy-MM-dd")</small>
                                    </td>
                                    <td>
                                        <a href="/admin/users/edit/@user.Id" class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-edit"></i> Edit
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<User>? users;

    protected override async Task OnInitializedAsync()
    {
        var dbContext = await DatabaseService.GetDbContextAsync();
        users = await dbContext.Users
            .OrderByDescending(u => u.CreatedAt)
            .ToListAsync();
    }

    private string GetStatusBadge(UserStatus status)
    {
        return status switch
        {
            UserStatus.Active => "bg-success",
            UserStatus.Pending => "bg-warning",
            UserStatus.Suspended => "bg-danger",
            UserStatus.Banned => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetVerificationBadge(UserVerificationStatus status)
    {
        return status switch
        {
            UserVerificationStatus.FullyVerified => "bg-success",
            UserVerificationStatus.EmailVerified => "bg-info",
            UserVerificationStatus.PhoneVerified => "bg-info",
            UserVerificationStatus.Unverified => "bg-warning",
            _ => "bg-secondary"
        };
    }
}

