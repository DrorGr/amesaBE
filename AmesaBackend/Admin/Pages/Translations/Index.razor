@page "/admin/translations"
@inject IAdminDatabaseService DatabaseService

<PageTitle>Translations - Amesa Admin</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1 class="display-6">
                <i class="fas fa-language"></i> Manage Translations
            </h1>
            <p class="text-muted">Edit multi-language content</p>
        </div>
    </div>

    <!-- Language Selector -->
    <div class="card mb-4">
        <div class="card-body">
            <label class="form-label fw-bold">Select Language:</label>
            <div class="btn-group" role="group">
                @foreach (var lang in languages)
                {
                    <button type="button" 
                            class="btn btn-outline-primary @(selectedLanguage == lang.Code ? "active" : "")"
                            @onclick="() => SelectLanguage(lang.Code)">
                        @lang.FlagUrl @lang.Name
                    </button>
                }
            </div>
        </div>
    </div>

    <!-- Translations Table -->
    @if (translations == null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary"></div>
            <p class="mt-3">Loading translations...</p>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="mb-3">
                    <input type="text" class="form-control" placeholder="Search translations..." 
                           @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterTranslations" />
                </div>

                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th style="width: 30%;">Key</th>
                                <th style="width: 50%;">Value</th>
                                <th style="width: 20%;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var translation in filteredTranslations)
                            {
                                <tr>
                                    <td>
                                        <code>@translation.Key</code><br />
                                        <small class="text-muted">@translation.Category</small>
                                    </td>
                                    <td>
                                        @if (editingId == translation.Id)
                                        {
                                            <textarea class="form-control" rows="3" @bind="editValue"></textarea>
                                        }
                                        else
                                        {
                                            <div>@translation.Value</div>
                                        }
                                    </td>
                                    <td>
                                        @if (editingId == translation.Id)
                                        {
                                            <button class="btn btn-sm btn-success me-2" @onclick="() => SaveEdit(translation)">
                                                <i class="fas fa-save"></i> Save
                                            </button>
                                            <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">
                                                <i class="fas fa-times"></i> Cancel
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => StartEdit(translation)">
                                                <i class="fas fa-edit"></i> Edit
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="mt-3">
                    <small class="text-muted">
                        Showing @filteredTranslations.Count of @translations.Count translations
                    </small>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Language> languages = new();
    private List<Translation>? translations;
    private List<Translation> filteredTranslations = new();
    private string selectedLanguage = "en";
    private string searchTerm = string.Empty;
    private Guid? editingId;
    private string editValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var dbContext = await DatabaseService.GetDbContextAsync();
        languages = await dbContext.Languages.ToListAsync();
        await LoadTranslationsAsync();
    }

    private async Task LoadTranslationsAsync()
    {
        var dbContext = await DatabaseService.GetDbContextAsync();
        translations = await dbContext.Translations
            .Where(t => t.Language.Code == selectedLanguage)
            .OrderBy(t => t.Category)
            .ThenBy(t => t.Key)
            .ToListAsync();
        
        filteredTranslations = translations;
    }

    private async Task SelectLanguage(string languageCode)
    {
        selectedLanguage = languageCode;
        searchTerm = string.Empty;
        await LoadTranslationsAsync();
    }

    private void FilterTranslations()
    {
        if (translations == null) return;

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredTranslations = translations;
        }
        else
        {
            filteredTranslations = translations
                .Where(t => 
                    t.Key.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    t.Value.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (t.Category?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
                .ToList();
        }
    }

    private void StartEdit(Translation translation)
    {
        editingId = translation.Id;
        editValue = translation.Value;
    }

    private void CancelEdit()
    {
        editingId = null;
        editValue = string.Empty;
    }

    private async Task SaveEdit(Translation translation)
    {
        var dbContext = await DatabaseService.GetDbContextAsync();
        translation.Value = editValue;
        translation.UpdatedAt = DateTime.UtcNow;
        await dbContext.SaveChangesAsync();
        
        editingId = null;
        editValue = string.Empty;
        await LoadTranslationsAsync();
    }
}

