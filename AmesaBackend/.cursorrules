# AmesaBackend - .NET 8.0 Admin Panel & API Context

## Project Overview
This is the **AmesaBackend** - a .NET 8.0 ASP.NET Core application serving as both:
1. **REST API** for the Amesa Lottery Platform frontend
2. **Admin Panel** - Blazor Server CMS for content management

## Current Status (2025-10-11)
- ✅ **Admin Panel**: Fully functional with secure login
- ✅ **Database Connections**: Both Development/Stage and Production working
- ✅ **Loading States**: Professional UI with loading spinners
- ✅ **Security**: Hardcoded admin credentials with secure placeholders
- ✅ **Environment Switching**: Database selector with proper refresh
- ✅ **Clean UI**: All debug styles removed, production-ready

## Architecture

### Core Technologies
- **.NET 8.0** with ASP.NET Core
- **Blazor Server** for admin panel UI
- **Entity Framework Core** with PostgreSQL
- **SignalR** for real-time features
- **JWT Authentication** for API
- **BCrypt** for password hashing

### Database Configuration
- **Development/Stage**: `amesadbmain1-stage.cruuae28ob7m.eu-north-1.rds.amazonaws.com`
  - Username: `postgres`
  - Password: `u1fwn3s9`
- **Production**: `amesadbmain1.cruuae28ob7m.eu-north-1.rds.amazonaws.com`
  - Username: `dror`
  - Password: `aAXa406L6qdqfTU6o8vr`
- **Local Development**: SQLite (`amesa.db`)

## Admin Panel Features

### Authentication
- **Login URL**: `/admin/login`
- **Credentials**: 
  - Email: `admin@amesa.com`
  - Password: `Admin123!`
- **Security**: Secure placeholder text, no credential exposure

### Database Management
- **Database Selector**: Choose between Development and Production
- **Real-time Switching**: Page refresh ensures proper context switching
- **Connection Status**: Clear error messages for connection failures
- **Loading States**: Professional loading spinners during data fetch

### Content Management
- **Houses**: CRUD operations for lottery properties
- **Images**: Upload and manage property photos
- **Translations**: Multi-language content management
- **Users**: User account management
- **Content**: Article and content management
- **Promotions**: Marketing campaign management

### UI/UX Features
- **Responsive Design**: Bootstrap-based modern interface
- **Loading Indicators**: Spinners during data operations
- **Error Handling**: User-friendly error messages
- **Navigation**: Intuitive sidebar navigation
- **Dashboard**: Overview statistics and quick actions

## Key Files & Structure

### Admin Panel
```
Admin/
├── App.razor                 # Root Blazor component
├── _Imports.razor           # Global imports
├── Pages/
│   ├── Index.razor          # Dashboard with loading states
│   ├── Login.razor          # Secure login form
│   ├── Logout.razor         # Session termination
│   ├── Houses/              # Property management
│   ├── Users/               # User management
│   ├── Translations/        # Content translation
│   ├── Content/             # Article management
│   └── Promotions/          # Marketing management
└── Shared/
    ├── MainLayout.razor     # Main layout with navigation
    ├── LoginLayout.razor    # Simple login layout
    └── DatabaseSelector.razor # Environment selector
```

### Services
```
Services/
├── AdminAuthService.cs      # Admin authentication
├── AdminDatabaseService.cs  # Database context management
├── IAdminAuthService.cs     # Authentication interface
└── IAdminDatabaseService.cs # Database service interface
```

### Configuration
```
appsettings.Development.json # Database connection strings
Program.cs                   # Service registration and routing
Pages/Admin/App.cshtml      # Blazor host page
```

## Development Guidelines

### Adding New Admin Features
1. Create Razor component in `Admin/Pages/`
2. Add navigation link in `MainLayout.razor`
3. Use `IAdminDatabaseService` for database access
4. Implement loading states for better UX
5. Add proper error handling

### Database Operations
- Always use `using var dbContext = await DatabaseService.GetDbContextAsync()`
- Implement loading states with `isLoading` boolean
- Handle exceptions gracefully with user-friendly messages
- Ensure proper disposal of database contexts

### Security Considerations
- Never expose actual credentials in UI placeholders
- Use secure authentication with proper session management
- Validate all user inputs
- Implement proper authorization checks

### UI/UX Standards
- Use Bootstrap classes for consistent styling
- Implement loading spinners for async operations
- Provide clear error messages
- Ensure responsive design
- Use FontAwesome icons for visual clarity

## Running the Application

### Local Development
```bash
cd BE/AmesaBackend
dotnet run --urls="http://localhost:5040"
```

### Access Points
- **API**: `http://localhost:5040/api/v1/`
- **Admin Panel**: `http://localhost:5040/admin`
- **Swagger**: `http://localhost:5040/swagger`
- **Health Check**: `http://localhost:5040/health`

### Admin Panel Workflow
1. Navigate to `/admin/login`
2. Login with admin credentials
3. Select target database (Development/Production)
4. Use dashboard for overview or navigate to specific sections
5. Switch databases as needed (auto-refresh on change)

## Recent Changes (2025-10-11)
- ✅ Implemented secure admin panel with Blazor Server
- ✅ Added database environment switching
- ✅ Implemented loading states and error handling
- ✅ Secured login form with generic placeholders
- ✅ Connected to both Development and Production databases
- ✅ Added comprehensive content management features
- ✅ Cleaned up debug styles and console logging
- ✅ Made application production-ready

## Important Notes
- **Database Contexts**: Always create new contexts per operation for Blazor Server compatibility
- **Session Management**: Uses static in-memory storage for Blazor Server compatibility
- **Environment Switching**: Forces page refresh to ensure proper context re-initialization
- **Security**: Admin credentials are hardcoded for simplicity (consider external auth in production)
- **Error Handling**: Comprehensive error messages help with debugging and user experience

## Future Enhancements
- External authentication integration
- Role-based access control
- Audit logging
- Advanced file upload features
- Real-time notifications
- Bulk operations
- Advanced search and filtering
